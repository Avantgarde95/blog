(self.webpackChunk=self.webpackChunk||[]).push([[299],{299:function(s){s.exports={html:'<p><a target="_blank" rel="noopener noreferrer"  href="https://reactrouter.com/">리액트 라우터</a>를 사용할 때, 만약 웹페이지 내부에서\n예외가 발생하면 라우팅이 정상적으로 작동하지 않는 경우가 있다.\n라우팅을 방해하지 않으면서 예외가 콘솔에 출력되게 하려면, 에러를 처리하는 컴포넌트를 만들어서\n각 경로(route)에 해당하는 컴포넌트를 덮어주면 된다.</p>\n<p>When using <a target="_blank" rel="noopener noreferrer"  href="https://reactrouter.com/">React Router</a>,\nrouting may not work properly if an exception occurs inside a web page.\nIf you want the exceptions to be printed on the console without interfering routing,\nyou can create an error handler and wrap the components\ncorresponding to each route.</p>\n<pre><code class="language-jsx"><span class="hljs">{<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/menu&#x27;</span>, <span class="hljs-attr">element</span>: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">MenuPage</span>/&gt;</span></span>}\n=&gt; {<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/menu&#x27;</span>, <span class="hljs-attr">element</span>: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ErrorHandler</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">MenuPage</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ErrorHandler</span>&gt;</span></span>}</span></code></pre>\n<p><a target="_blank" rel="noopener noreferrer"  href="https://reactjs.org/">리액트</a>에서 에러 핸들러는 다음과 같이 만들면 된다.\n(<a target="_blank" rel="noopener noreferrer"  href="https://www.typescriptlang.org/">타입스크립트</a>로 작성하였다.)</p>\n<p>In <a target="_blank" rel="noopener noreferrer"  href="https://reactjs.org/">React</a>, you can create an error handler like this:\n(The code is written in <a target="_blank" rel="noopener noreferrer"  href="https://www.typescriptlang.org/">Typescript</a>.)</p>\n<pre><code class="language-typescript"><span class="hljs"><span class="hljs-keyword">import</span> {Component, ErrorInfo, ReactNode} <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n\n<span class="hljs-keyword">class</span> ErrorHandler <span class="hljs-keyword">extends</span> Component&lt;{ children: ReactNode }&gt; {\n    <span class="hljs-keyword">constructor</span>(<span class="hljs-params">{children = <span class="hljs-literal">null</span>}</span>) {\n        <span class="hljs-built_in">super</span>({children});\n    }\n\n    componentDidCatch(error: <span class="hljs-built_in">Error</span>, errorInfo: ErrorInfo) {\n        <span class="hljs-comment">// Print the exception.</span>\n        <span class="hljs-built_in">console</span>.error(error?.toString());\n        <span class="hljs-built_in">console</span>.error(errorInfo?.componentStack);\n    }\n\n    render() {\n        <span class="hljs-comment">// Render the component.</span>\n        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.props.children;\n    }\n}</span></code></pre>\n<p>에러 발생시에 에러 페이지 등 다른 컴포넌트를 렌더링하고 싶다면, 아래와 같이 하면 된다.</p>\n<p>If you want to render other components such as error pages when an error occurs,\nyou can do as follows.</p>\n<pre><code class="language-typescript"><span class="hljs"><span class="hljs-keyword">import</span> {Component, ErrorInfo, ReactNode} <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n\n<span class="hljs-keyword">class</span> ErrorHandler <span class="hljs-keyword">extends</span> Component&lt;{ children: ReactNode }, { hasError: <span class="hljs-built_in">boolean</span> }&gt; {\n    <span class="hljs-keyword">constructor</span>(<span class="hljs-params">{children = <span class="hljs-literal">null</span>}</span>) {\n        <span class="hljs-built_in">super</span>({children});\n        <span class="hljs-comment">// hasError = true when we have an exception.</span>\n        <span class="hljs-built_in">this</span>.state = {hasError: <span class="hljs-literal">false</span>};\n    }\n\n    componentDidCatch(error: <span class="hljs-built_in">Error</span>, errorInfo: ErrorInfo) {\n        <span class="hljs-built_in">this</span>.setState({hasError: <span class="hljs-literal">true</span>}, <span class="hljs-function">() =&gt;</span> {\n            <span class="hljs-built_in">console</span>.error(error?.toString());\n            <span class="hljs-built_in">console</span>.error(errorInfo?.componentStack);\n        });\n    }\n\n    render() {\n        <span class="hljs-comment">// If we have an exception, render &lt;ErrorPage/&gt; instead.</span>\n        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.state.hasError ? &lt;ErrorPage/&gt; : <span class="hljs-built_in">this</span>.props.children;\n    }\n}</span></code></pre>\n'}}}]);