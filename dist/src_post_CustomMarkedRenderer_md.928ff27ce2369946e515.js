(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_post_CustomMarkedRenderer_md"],{

/***/ "./src/post/CustomMarkedRenderer.md":
/*!******************************************!*\
  !*** ./src/post/CustomMarkedRenderer.md ***!
  \******************************************/
/***/ (function(module) {

module.exports = {html: "<p><a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://marked.js.org/\">marked.js</a> 라이브러리를 사용하면 마크다운 문서를 HTML로 변환할 수 있다.\n이 블로그도 마크다운으로 포스트를 작성하고 해당 라이브러리로 포스트를 HTML로 변환해서 렌더링하는 방식으로 작동한다.</p>\n<p>We can convert a Markdown document to HTML by using <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://marked.js.org/\">marked.js</a> library.\nThis blog also works by writing a post in Markdown, converting the post to HTML with the library, and rendering it.</p>\n<pre><code class=\"language-html\"><span class=\"hljs\"># Hello, world! =&gt; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello, world!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></code></pre>\n<p>이 때 HTML 변환 과정을 수정하고 싶으면 어떻게 하면 될까?\nmarked.js의 <code>Renderer</code> 클래스를 이용하여 커스텀 렌더러를 작성해주면 된다.</p>\n<p>What should we do if we want to modify HTML converting process?\nWe can do it by writing a custom renderer by using <code>Renderer</code> class of marked.js.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs\"><span class=\"hljs-keyword\">const</span> {Renderer} = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;marked&#x27;</span>);\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyRenderer</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Renderer</span> </span>{\n    ...\n}</span></code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://github.com/markedjs/marked/blob/master/src/Renderer.js\">여기서</a> <code>Renderer</code>가 마크다운의 구성요소들을 어떻게 변환하는지 볼 수 있다.\n원하는 구성요소에 해당하는 메서드를 오버라이드하면 된다.\n예를 들어, 아래의 커스텀 렌더러는 이미지를 변환할 때 HTML 태그에 <code>Image</code>라는 클래스를 붙일 것이다.</p>\n<p>We can see how marked.js handles the components of Markdown at <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://github.com/markedjs/marked/blob/master/src/Renderer.js\">here</a>.\nOverride the method which corresponds to the component you want.\nFor example, the custom renderer below will add <code>Image</code> class to the HTML tag when converting a image.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs\"><span class=\"hljs-keyword\">const</span> {Renderer} = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;marked&#x27;</span>);\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyRenderer</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Renderer</span> </span>{\n    image(href, title, text) {\n        <span class=\"hljs-keyword\">const</span> out = <span class=\"hljs-built_in\">super</span>.image(href, title, text);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`&lt;img class=&quot;Image&quot;<span class=\"hljs-subst\">${out.substr(<span class=\"hljs-number\">4</span>)}</span>`</span>;\n    }\n}</span></code></pre>\n<p>만약 <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://webpack.js.org/\">웹팩</a>을 사용한다면, 아래와 같이 커스텀 렌더러를 적용해줄 수 있다.</p>\n<p>If you use <a target=\"_blank\" rel=\"noopener noreferrer\"  href=\"https://webpack.js.org/\">Webpack</a>, you can apply the custom renderer like the following.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs\"><span class=\"hljs-built_in\">module</span>: {\n    <span class=\"hljs-attr\">rules</span>: [\n        {\n            <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.md$/</span>,\n            use: [\n                {<span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&#x27;html-loader&#x27;</span>},\n                {<span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&#x27;markdown-loader&#x27;</span>, <span class=\"hljs-attr\">options</span>: {<span class=\"hljs-attr\">renderer</span>: MyRenderer}}\n            ]\n        }\n    ]\n}</span></code></pre>\n"};

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcG9zdC9DdXN0b21NYXJrZWRSZW5kZXJlci5tZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLGtCQUFrQiwrakJBQStqQiw4QkFBOEIsdUNBQXVDLGlEQUFpRCx3Q0FBd0MsdVpBQXVaLFNBQVMsa0ZBQWtGLFlBQVksU0FBUyxxTkFBcU4sWUFBWSwyeUJBQTJ5QixTQUFTLGtGQUFrRixZQUFZLFNBQVMscU5BQXFOLGdDQUFnQyw4SEFBOEgsc0ZBQXNGLGdCQUFnQixXQUFXLDZCQUE2QixpREFBaUQsZ0JBQWdCLE9BQU8sR0FBRyxtYkFBbWIsMERBQTBELHdJQUF3SSwyRUFBMkUsaUJBQWlCLFFBQVEsb0JBQW9CLDJFQUEyRSxxQkFBcUIsb0RBQW9ELHVEQUF1RCwwQkFBMEIsVUFBVSx5QiIsImZpbGUiOiJzcmNfcG9zdF9DdXN0b21NYXJrZWRSZW5kZXJlcl9tZC45MjhmZjI3Y2UyMzY5OTQ2ZTUxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge2h0bWw6IFwiPHA+PGEgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgIGhyZWY9XFxcImh0dHBzOi8vbWFya2VkLmpzLm9yZy9cXFwiPm1hcmtlZC5qczwvYT4g65287J2067iM65+s66as66W8IOyCrOyaqe2VmOuptCDrp4jtgazri6TsmrQg66y47ISc66W8IEhUTUzroZwg67OA7ZmY7ZWgIOyImCDsnojri6QuXFxu7J20IOu4lOuhnOq3uOuPhCDrp4jtgazri6TsmrTsnLzroZwg7Y+s7Iqk7Yq466W8IOyekeyEse2VmOqzoCDtlbTri7kg65287J2067iM65+s66as66GcIO2PrOyKpO2KuOulvCBIVE1M66GcIOuzgO2ZmO2VtOyEnCDroIzrjZTrp4HtlZjripQg67Cp7Iud7Jy866GcIOyekeuPme2VnOuLpC48L3A+XFxuPHA+V2UgY2FuIGNvbnZlcnQgYSBNYXJrZG93biBkb2N1bWVudCB0byBIVE1MIGJ5IHVzaW5nIDxhIHRhcmdldD1cXFwiX2JsYW5rXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiICBocmVmPVxcXCJodHRwczovL21hcmtlZC5qcy5vcmcvXFxcIj5tYXJrZWQuanM8L2E+IGxpYnJhcnkuXFxuVGhpcyBibG9nIGFsc28gd29ya3MgYnkgd3JpdGluZyBhIHBvc3QgaW4gTWFya2Rvd24sIGNvbnZlcnRpbmcgdGhlIHBvc3QgdG8gSFRNTCB3aXRoIHRoZSBsaWJyYXJ5LCBhbmQgcmVuZGVyaW5nIGl0LjwvcD5cXG48cHJlPjxjb2RlIGNsYXNzPVxcXCJsYW5ndWFnZS1odG1sXFxcIj48c3BhbiBjbGFzcz1cXFwiaGxqc1xcXCI+IyBIZWxsbywgd29ybGQhID0mZ3Q7IDxzcGFuIGNsYXNzPVxcXCJobGpzLXRhZ1xcXCI+Jmx0OzxzcGFuIGNsYXNzPVxcXCJobGpzLW5hbWVcXFwiPmgxPC9zcGFuPiZndDs8L3NwYW4+SGVsbG8sIHdvcmxkITxzcGFuIGNsYXNzPVxcXCJobGpzLXRhZ1xcXCI+Jmx0Oy88c3BhbiBjbGFzcz1cXFwiaGxqcy1uYW1lXFxcIj5oMTwvc3Bhbj4mZ3Q7PC9zcGFuPjwvc3Bhbj48L2NvZGU+PC9wcmU+XFxuPHA+7J20IOuVjCBIVE1MIOuzgO2ZmCDqs7zsoJXsnYQg7IiY7KCV7ZWY6rOgIOyLtuycvOuptCDslrTrlrvqsowg7ZWY66m0IOuQoOq5jD9cXG5tYXJrZWQuanPsnZggPGNvZGU+UmVuZGVyZXI8L2NvZGU+IO2BtOuemOyKpOulvCDsnbTsmqntlZjsl6wg7Luk7Iqk7YWAIOugjOuNlOufrOulvCDsnpHshLHtlbTso7zrqbQg65Cc64ukLjwvcD5cXG48cD5XaGF0IHNob3VsZCB3ZSBkbyBpZiB3ZSB3YW50IHRvIG1vZGlmeSBIVE1MIGNvbnZlcnRpbmcgcHJvY2Vzcz9cXG5XZSBjYW4gZG8gaXQgYnkgd3JpdGluZyBhIGN1c3RvbSByZW5kZXJlciBieSB1c2luZyA8Y29kZT5SZW5kZXJlcjwvY29kZT4gY2xhc3Mgb2YgbWFya2VkLmpzLjwvcD5cXG48cHJlPjxjb2RlIGNsYXNzPVxcXCJsYW5ndWFnZS1qYXZhc2NyaXB0XFxcIj48c3BhbiBjbGFzcz1cXFwiaGxqc1xcXCI+PHNwYW4gY2xhc3M9XFxcImhsanMta2V5d29yZFxcXCI+Y29uc3Q8L3NwYW4+IHtSZW5kZXJlcn0gPSA8c3BhbiBjbGFzcz1cXFwiaGxqcy1idWlsdF9pblxcXCI+cmVxdWlyZTwvc3Bhbj4oPHNwYW4gY2xhc3M9XFxcImhsanMtc3RyaW5nXFxcIj4mI3gyNzttYXJrZWQmI3gyNzs8L3NwYW4+KTtcXG5cXG48c3BhbiBjbGFzcz1cXFwiaGxqcy1jbGFzc1xcXCI+PHNwYW4gY2xhc3M9XFxcImhsanMta2V5d29yZFxcXCI+Y2xhc3M8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJobGpzLXRpdGxlXFxcIj5NeVJlbmRlcmVyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwiaGxqcy1rZXl3b3JkXFxcIj5leHRlbmRzPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwiaGxqcy10aXRsZVxcXCI+UmVuZGVyZXI8L3NwYW4+IDwvc3Bhbj57XFxuICAgIC4uLlxcbn08L3NwYW4+PC9jb2RlPjwvcHJlPlxcbjxwPjxhIHRhcmdldD1cXFwiX2JsYW5rXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiICBocmVmPVxcXCJodHRwczovL2dpdGh1Yi5jb20vbWFya2VkanMvbWFya2VkL2Jsb2IvbWFzdGVyL3NyYy9SZW5kZXJlci5qc1xcXCI+7Jes6riw7IScPC9hPiA8Y29kZT5SZW5kZXJlcjwvY29kZT7qsIAg66eI7YGs64uk7Jq07J2YIOq1rOyEseyalOyGjOuTpOydhCDslrTrlrvqsowg67OA7ZmY7ZWY64qU7KeAIOuzvCDsiJgg7J6I64ukLlxcbuybkO2VmOuKlCDqtazshLHsmpTshozsl5Ag7ZW064u57ZWY64qUIOuplOyEnOuTnOulvCDsmKTrsoTrnbzsnbTrk5ztlZjrqbQg65Cc64ukLlxcbuyYiOulvCDrk6TslrQsIOyVhOuemOydmCDsu6TsiqTthYAg66CM642U65+s64qUIOydtOuvuOyngOulvCDrs4DtmZjtlaAg65WMIEhUTUwg7YOc6re47JeQIDxjb2RlPkltYWdlPC9jb2RlPuudvOuKlCDtgbTrnpjsiqTrpbwg67aZ7J28IOqyg+ydtOuLpC48L3A+XFxuPHA+V2UgY2FuIHNlZSBob3cgbWFya2VkLmpzIGhhbmRsZXMgdGhlIGNvbXBvbmVudHMgb2YgTWFya2Rvd24gYXQgPGEgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgIGhyZWY9XFxcImh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZWRqcy9tYXJrZWQvYmxvYi9tYXN0ZXIvc3JjL1JlbmRlcmVyLmpzXFxcIj5oZXJlPC9hPi5cXG5PdmVycmlkZSB0aGUgbWV0aG9kIHdoaWNoIGNvcnJlc3BvbmRzIHRvIHRoZSBjb21wb25lbnQgeW91IHdhbnQuXFxuRm9yIGV4YW1wbGUsIHRoZSBjdXN0b20gcmVuZGVyZXIgYmVsb3cgd2lsbCBhZGQgPGNvZGU+SW1hZ2U8L2NvZGU+IGNsYXNzIHRvIHRoZSBIVE1MIHRhZyB3aGVuIGNvbnZlcnRpbmcgYSBpbWFnZS48L3A+XFxuPHByZT48Y29kZSBjbGFzcz1cXFwibGFuZ3VhZ2UtamF2YXNjcmlwdFxcXCI+PHNwYW4gY2xhc3M9XFxcImhsanNcXFwiPjxzcGFuIGNsYXNzPVxcXCJobGpzLWtleXdvcmRcXFwiPmNvbnN0PC9zcGFuPiB7UmVuZGVyZXJ9ID0gPHNwYW4gY2xhc3M9XFxcImhsanMtYnVpbHRfaW5cXFwiPnJlcXVpcmU8L3NwYW4+KDxzcGFuIGNsYXNzPVxcXCJobGpzLXN0cmluZ1xcXCI+JiN4Mjc7bWFya2VkJiN4Mjc7PC9zcGFuPik7XFxuXFxuPHNwYW4gY2xhc3M9XFxcImhsanMtY2xhc3NcXFwiPjxzcGFuIGNsYXNzPVxcXCJobGpzLWtleXdvcmRcXFwiPmNsYXNzPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwiaGxqcy10aXRsZVxcXCI+TXlSZW5kZXJlcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImhsanMta2V5d29yZFxcXCI+ZXh0ZW5kczwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImhsanMtdGl0bGVcXFwiPlJlbmRlcmVyPC9zcGFuPiA8L3NwYW4+e1xcbiAgICBpbWFnZShocmVmLCB0aXRsZSwgdGV4dCkge1xcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcImhsanMta2V5d29yZFxcXCI+Y29uc3Q8L3NwYW4+IG91dCA9IDxzcGFuIGNsYXNzPVxcXCJobGpzLWJ1aWx0X2luXFxcIj5zdXBlcjwvc3Bhbj4uaW1hZ2UoaHJlZiwgdGl0bGUsIHRleHQpO1xcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcImhsanMta2V5d29yZFxcXCI+cmV0dXJuPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwiaGxqcy1zdHJpbmdcXFwiPmAmbHQ7aW1nIGNsYXNzPSZxdW90O0ltYWdlJnF1b3Q7PHNwYW4gY2xhc3M9XFxcImhsanMtc3Vic3RcXFwiPiR7b3V0LnN1YnN0cig8c3BhbiBjbGFzcz1cXFwiaGxqcy1udW1iZXJcXFwiPjQ8L3NwYW4+KX08L3NwYW4+YDwvc3Bhbj47XFxuICAgIH1cXG59PC9zcGFuPjwvY29kZT48L3ByZT5cXG48cD7rp4zslb0gPGEgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgIGhyZWY9XFxcImh0dHBzOi8vd2VicGFjay5qcy5vcmcvXFxcIj7sm7ntjKk8L2E+7J2EIOyCrOyaqe2VnOuLpOuptCwg7JWE656Y7JmAIOqwmeydtCDsu6TsiqTthYAg66CM642U65+s66W8IOyggeyaqe2VtOykhCDsiJgg7J6I64ukLjwvcD5cXG48cD5JZiB5b3UgdXNlIDxhIHRhcmdldD1cXFwiX2JsYW5rXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiICBocmVmPVxcXCJodHRwczovL3dlYnBhY2suanMub3JnL1xcXCI+V2VicGFjazwvYT4sIHlvdSBjYW4gYXBwbHkgdGhlIGN1c3RvbSByZW5kZXJlciBsaWtlIHRoZSBmb2xsb3dpbmcuPC9wPlxcbjxwcmU+PGNvZGUgY2xhc3M9XFxcImxhbmd1YWdlLWphdmFzY3JpcHRcXFwiPjxzcGFuIGNsYXNzPVxcXCJobGpzXFxcIj48c3BhbiBjbGFzcz1cXFwiaGxqcy1idWlsdF9pblxcXCI+bW9kdWxlPC9zcGFuPjoge1xcbiAgICA8c3BhbiBjbGFzcz1cXFwiaGxqcy1hdHRyXFxcIj5ydWxlczwvc3Bhbj46IFtcXG4gICAgICAgIHtcXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaGxqcy1hdHRyXFxcIj50ZXN0PC9zcGFuPjogPHNwYW4gY2xhc3M9XFxcImhsanMtcmVnZXhwXFxcIj4vXFxcXC5tZCQvPC9zcGFuPixcXG4gICAgICAgICAgICB1c2U6IFtcXG4gICAgICAgICAgICAgICAgezxzcGFuIGNsYXNzPVxcXCJobGpzLWF0dHJcXFwiPmxvYWRlcjwvc3Bhbj46IDxzcGFuIGNsYXNzPVxcXCJobGpzLXN0cmluZ1xcXCI+JiN4Mjc7aHRtbC1sb2FkZXImI3gyNzs8L3NwYW4+fSxcXG4gICAgICAgICAgICAgICAgezxzcGFuIGNsYXNzPVxcXCJobGpzLWF0dHJcXFwiPmxvYWRlcjwvc3Bhbj46IDxzcGFuIGNsYXNzPVxcXCJobGpzLXN0cmluZ1xcXCI+JiN4Mjc7bWFya2Rvd24tbG9hZGVyJiN4Mjc7PC9zcGFuPiwgPHNwYW4gY2xhc3M9XFxcImhsanMtYXR0clxcXCI+b3B0aW9uczwvc3Bhbj46IHs8c3BhbiBjbGFzcz1cXFwiaGxqcy1hdHRyXFxcIj5yZW5kZXJlcjwvc3Bhbj46IE15UmVuZGVyZXJ9fVxcbiAgICAgICAgICAgIF1cXG4gICAgICAgIH1cXG4gICAgXVxcbn08L3NwYW4+PC9jb2RlPjwvcHJlPlxcblwifTsiXSwic291cmNlUm9vdCI6IiJ9